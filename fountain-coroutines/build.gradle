apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'org.jetbrains.dokka-android'

android {
    compileSdkVersion build_versions.target_sdk
    buildToolsVersion build_versions.build_tools
    defaultConfig {
        minSdkVersion build_versions.min_sdk
        targetSdkVersion build_versions.target_sdk
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }
    lintOptions {
        checkAllWarnings true
        warningsAsErrors true
        ignore 'GradleDependency', 'NewerVersionAvailable'
    }
}

dependencies {
    androidTestImplementation "com.android.support.test.espresso:espresso-core:${libraryVersion.espresso}"
    androidTestImplementation "com.android.support.test:runner:${libraryVersion.testRunner}"

    api project(':fountain-core')
    implementation "android.arch.paging:common:${libraryVersion.archPaging}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${libraryVersion.kotlinCoroutines}"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${libraryVersion.kotlin}"

    testImplementation "android.arch.core:core-testing:${libraryVersion.archTesting}"
    testImplementation "android.arch.paging:runtime:${libraryVersion.archPaging}"
    testImplementation "junit:junit:${libraryVersion.junit}"
    testImplementation "org.mockito:mockito-core:${libraryVersion.mockito}"
    testImplementation project(':fountain-testutils')
}

dokka {
    outputDirectory = "$buildDir/docs"
}

task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = 'javadoc'
    outputDirectory = "$buildDir/javadoc"
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}
